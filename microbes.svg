<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<svg width="600" height="400"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   version="1.1"
   cursor="crosshair"
   onload="startUp()"
   onmousedown="mouseClick(evt)"
   onfocusin="keyPress(evt)">
<script>

<![CDATA[
var xmlns="http://www.w3.org/2000/svg"
var count=50
var radius=5
var enabled=false

var maxAcc=1
var maxVel=5
var deathVel=12		
var deadTime=5000
var reactAcc=8
var root=document.documentElement
var width = root.width.animVal.value;
var height = root.height.animVal.value;

var microbes=new Array()

		

function startUp() 
{
  background = document.createElementNS(xmlns,"rect")
  background.setAttributeNS(null,"x","0")
  background.setAttributeNS(null,"y","0")
  background.setAttributeNS(null,"width", width)
  background.setAttributeNS(null,"height",height)

  background.setAttributeNS(null,"opacity","1")
  background.setAttributeNS(null,"fill","#113311")
  root.appendChild(background)

  for(i=0;i<count;i++) {
   	microbe = new Microbe()
	microbes[i] = microbe
	root.appendChild(microbe.shape)
  }

  border = document.createElementNS(xmlns,"rect")
  border.setAttributeNS(null,"x","0")
  border.setAttributeNS(null,"y","0")
  border.setAttributeNS(null,"width", width)
  border.setAttributeNS(null,"height",height)
  border.setAttributeNS(null,"opacity","1")
  border.setAttributeNS(null,"stroke-width","3")
  border.setAttributeNS(null,"stroke","black")
  border.setAttributeNS(null,"fill","none")

  root.appendChild(border)

  for (i in microbes) microbes[i].update()
}

function updateScreen() {
  if (enabled)
      for (i in microbes) microbes[i].update()
}

function Microbe(N)
{
	this.x = Math.random()*width
	this.y = Math.random()*height
	this.rx = (Math.random()+1)*radius
	this.ry = this.rx
	this.shape = document.createElementNS(xmlns,"ellipse")

	this.alive = true
	this.rotation = 0
	this.velx = 1
	this.vely = 1
	this.accx = 1
	this.accy = 1
	this.death = new Date().getTime();
	this.color = "#777777"
	this.shape.setAttributeNS(null,"stroke","black")
	this.shape.setAttributeNS(null,"opacity",".7")
	this.shape.setAttributeNS(null,"stroke-width","2")

	this.update = function(){
	    	with(this){
			var vel = Math.sqrt(Math.pow(velx,2)+ Math.pow(vely,2));

			if (!alive) {
				if (new Date().getTime()-death.getTime()>deadTime) {
					alive=true;
				}
			}
			
			if (vel>deathVel) {
				alive=false;
				death=new Date();
			}
			
			x+=velx;
			y+=vely;
			
			velx+=accx;
			vely+=accy;
			
			if (alive) {
				this.modifyAccel();
				this.curbSpeed();
				keepInBoundaries();
			} else {
				this.slowdown();
			}
			deform();
			modifyColor();

			shape.setAttributeNS(null,"cx",x)
			shape.setAttributeNS(null,"cy",y)
			shape.setAttributeNS(null,"rx", rx)
			shape.setAttributeNS(null,"ry", ry)
			shape.setAttributeNS(null,"fill",color)
			shape.setAttribute("transform","rotate("+rotation+","+ x +","+ y+")")

		}
	}

	this.react = function (e, power) {
		with(this) {
			var dist  = Math.sqrt(Math.abs(e.clientX-x)+ Math.abs(e.clientY-y));
			var distX = Math.abs(e.clientX-x);			
			var distY = Math.abs(e.clientY-y);			

			var totalDist = distX+distY;
			distX=distX/totalDist;
			distY=distY/totalDist;
			
			var power = Math.min(1, power/Math.pow(dist,2));
			
			if (x>e.clientX) {
				accx+=reactAcc*power*distX;
			} else {
				accx-=reactAcc*power*distX;
			}
			
			if (y>e.clientY) {
				accy+=reactAcc*power*distY;
			} else {
				accy-=reactAcc*power*distY;
			}
		}
	}
	this.slowdown = function()  {
		with(this) {
			accx=0;
			accy=0;
			velx = Math.floor(velx);
			vely = Math.floor(vely);
			
			if (velx>0) {
				velx-=1;
			}  else if (velx< 0) {
				velx+= 1;
			}

			if (vely>0) {
				vely-=1;
			}  else if (vely< 0) {
				vely+= 1;
			}
		}
	}
	this.deform = function()  {
		with(this) {
			var angle = 0;
			var vel = Math.sqrt(Math.pow(velx,2)+ Math.pow(vely,2));
			if (vel!=0) {
				if (velx>0 && vely>=0) {
					angle=90+ rad2deg(vely/vel);
				}
				if (velx>0 && vely<0) {
					angle=rad2deg(velx/vel);
				}
				if (velx<=0 && vely>=0) {
					angle=180+rad2deg(-velx/vel);
				}
				if (velx<=0 && vely<0) {
					angle=270+rad2deg(-vely/vel);
				}
				rotation=angle;
				ry=rx + 3*(Math.min(vel, maxVel)/maxVel);			
			}

		}
	}
	this.modifyColor = function(){
		with(this) {
			var vel = Math.sqrt(Math.pow(velx,2)+ Math.pow(vely,2));
			var green= 100+ 100*(vel/maxVel);
			if (green>255) green=255;
			color = "#50"+ Math.floor(green).toString(16)+"50"
		}
	}
	this.modifyAccel = function() {
		with(this) {
			if (accx>=maxAcc) {
				accx-=1;
			}  else if (accx<= -maxAcc) {
				accx+= 1;
			}  else  {
				if(Math.random()>.66) {
					accx++;
				} else if(Math.random()>.5) {
					accx--;
				} 
			} 
			if (accy>=maxAcc) {
				accy-=1;
			}  else if (accy<= -maxAcc) {
				accy+=1;
			}  else  {
				if(Math.random()>.66) {
					accy++;
				} else if(Math.random()>.5) {
					accy--;
				} 
			} 
		}
	}
				
	this.curbSpeed = function() {
		with(this) {
			if (velx>maxVel) {
				velx-=Math.random()*2;
			}

			if (vely>maxVel) {
				vely-=Math.random()*2;
			}

			if (velx< -maxVel) {
				velx+=Math.random()*2;
			}

			if (vely< -maxVel) {
				vely+=Math.random()*2;
			}
		}
	}
		
	this.keepInBoundaries = function() {
		with(this) {
			if (x<0) {
				accx=maxAcc;
			}
			if (y<0) {
				accy=maxAcc;
			}

			if (y>height) {
				accy= -maxAcc;
			}

			if (x>width) {
				accx= -maxAcc;
			}
		}
	}



}

function rad2deg(rad) {
	return (rad*360)/(2*Math.PI);
}

function mouseClick(e)
{
  if (!enabled) {
      setInterval("updateScreen()",30);
      enabled=true;
  } else {
      for (i in microbes) microbes[i].react(e, 100)
  }
}



]]>

</script>


</svg>

